n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
install.packages("OpenImageR")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog.csv")
install.packages("OpenImageR")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog.csv")
install.packages("OpenImageR")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/000",collapse="",i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog_extraction.csv")
install.packages("OpenImageR")
install.packages("OpenImageR")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/000",collapse="",i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog_extraction.csv")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog_extraction.csv")
paste(rep(0,4-n),collapse="")
paste(rep(0,4-n))
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog_extraction.csv")
install.packages("OpenImageR")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog_extraction.csv")
install.packages("OpenImageR")
install.packages("OpenImageR")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog_extraction.csv")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n<-nchar(as.character(i))
path<-paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
a <- readImage(path)
hog <- rbind(hog,HOG(a))
}
write.csv(hog,file = "hog_extraction.csv")
?paste0
install.packages("OpenImageR")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n <- nchar(as.character(i))
path <- paste("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
images <- readImage(path)
hog <- rbind(hog,HOG(images))
}
# Save the info of each image into the hog_extraction file
write.csv(hog,file = "hog_extraction.csv")
install.packages("OpenImageR")
install.packages("OpenImageR")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n <- nchar(as.character(i))
path <- paste("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
images <- readImage(path)
hog <- rbind(hog,HOG(images))
}
# Save the info of each image into the hog_extraction file
write.csv(hog,file = "hog_extraction.csv")
library("OpenImageR")
hog <- vector()
for (i in 1:5){
n <- nchar(as.character(i))
directory <- paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-n),collapse=""),i,".jpg")
images <- readImage(directory)
hog <- rbind(hog,HOG(images))
}
# Save the info of each image into the hog_extraction file
write.csv(hog,file = "hog_extraction.csv")
hog
class(hog)
library("OpenImageR")
values <- NULL
for (i in 1:5){
length1 <- nchar(as.character(i))
directory <- paste0("C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/",paste(rep(0,4-length1),collapse=""),i,".jpg")
images <- readImage(directory)
values <- rbind(hog,HOG(images))
}
# Save the info of each image into the hog_extraction file
write.csv(values, file = "hog_extraction.csv")
library("OpenImageR")
values <- NULL
path <- "C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/"
for (i in 1:5){
length1 <- nchar(as.character(i))
directory <- paste0(path,paste(rep(0,4-length1),collapse=""),i,".jpg")
images <- readImage(directory)
values <- rbind(hog,HOG(images))
}
library("OpenImageR")
values <- NULL
path <- "C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/"
for (i in 1:5){
length1 <- nchar(as.character(i))
directory <- paste0(path,paste(rep(0,4-length1),collapse=""),i,".jpg")
images <- readImage(directory)
values <- rbind(hog,HOG(images))
}
# Save the info of each image into the hog_extraction file
write.csv(values, file = "hog_extraction.csv")
library("OpenImageR")
values <- NULL
path <- "C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/"
for (i in 1:5){
length1 <- nchar(as.character(i))
directory <- paste0(path,paste(rep(0,4-length1),collapse=""),i,".jpg")
images <- readImage(directory)
values <- rbind(values,HOG(images))
}
# Save the info of each image into the hog_extraction file
write.csv(values, file = "hog_extraction.csv")
library("OpenImageR")
values <- NULL
path1 <- "C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/"
for (i in 1:5){
length1 <- nchar(as.character(i))
directory <- paste0(path1,paste(rep(0,4 - length1),collapse=""),i,".jpg")
images <- readImage(directory)
# Use HOG function to extract the info of all images
extractedvalues <- HOG(images)
values <- rbind(values,extractedvalues)
}
# Save the info of each image into the hog_extraction file
write.csv(values, file = "hog_extraction.csv")
library("OpenImageR")
values <- NULL
path1 <- "C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/"
for (i in 1:3000){
length1 <- nchar(as.character(i))
directory <- paste0(path1,paste(rep(0,4 - length1),collapse=""),i,".jpg")
# Retrieve the all the images
images <- readImage(directory)
# Use HOG function to extract the info of all images
extractedvalues <- HOG(images)
values <- rbind(values,extractedvalues)
}
# Save the info of each image into the hog_extraction file
write.csv(values, file = "hog_extraction.csv")
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
#library(EBImage)
#library(mxnet)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
datasplit_hog <- data_split("hog_extraction")
datasplit_hog <- data_split("hog_extraction")
datasplit_hog <- data_split("hog_extraction")
train_hog <- datasplit_LBP$df_train
test_hog <- datasplit_LBP$df_test
SVM_LBP <- train_svm(train_LBP)
load("../output/GBM_hog.RData")
GBM_hog <- train_gbm(train_hog)
save(GBM_LBP,file="../output/GBM_hog.RData")
GBM_hog <- train_gbm(train_hog)
save(GBM_hog,file="../output/GBM_hog.RData")
load("../output/GBM_hog.RData")
GBM_hog.time <- GBM_hog$time
GBM_hog.time
GBM.test.result_hog <- test_gbm(GBM_hog, test_hog)
GBM.test.accuracy_hog <- mean(GBM.test.result_hog == test_hog[,1])
GBM.test.accuracy_hog
test_hog[,1]
GBM.test.result_hog
datasplit_hog <- data_split("hog_extraction")
train_hog <- datasplit_hog$df_train
test_hog <- datasplit_hog$df_test
GBM_hog <- train_gbm(train_hog)
save(GBM_hog,file="../output/GBM_hog.RData")
load("../output/GBM_hog.RData")
GBM_hog.time <- GBM_hog$time
GBM_hog.time
GBM.test.result_hog <- test_gbm(GBM_hog, test_hog)
GBM.test.accuracy_hog <- mean(GBM.test.result_hog == test_hog[,1])
GBM.test.accuracy_hog
GBM_hog <- train_gbm(train_hog)
save(GBM_hog,file="../output/GBM_hog.RData")
SVM_hog <- train_svm(train_hog)
datasplit_hog <- data_split("hog_extraction")
train_hog <- datasplit_hog$df_train
test_hog <- datasplit_hog$df_test
GBM_hog <- train_gbm(train_hog)
save(GBM_hog,file="../output/GBM_hog.RData")
load("../output/GBM_hog.RData")
GBM_hog.time <- GBM_hog$time
GBM_hog.time
GBM.test.result_hog <- test_gbm(GBM_hog, test_hog)
GBM.test.accuracy_hog <- mean(GBM.test.result_hog == test_hog[,1])
GBM.test.accuracy_hog
SVM_hog <- train_svm(train_hog)
save(SVM_hog,file="../output/SVM_hog.RData")
load("../output/SVM_LBP.RData")
SVM_LBP.time <- SVM_LBP$time
SVM_LBP.time
SVM.test.result_LBP <- test(SVM_LBP, test_LBP)
SVM.test.accuracy_LBP <- mean(SVM.test.result_LBP == test_LBP[,1])
SVM.test.accuracy_LBP
load("../output/SVM_hog.RData")
SVM_hog.time <- SVM_hog$time
SVM_hog.time
SVM.test.result_hog <- test(SVM_hog, test_hog)
SVM.test.accuracy_hog <- mean(SVM.test.result_hog == test_hog[,1])
SVM.test.accuracy_hog
RF_hog <- train_rf(train_hog)
save(RF_hog,file="../output/RF_hog.RData")
load("../output/RF_hog.RData")
RF_hog.time <- RF_hog$time
RF_hog.time
RF.test.result_hog <- test(RF_hog, test_hog)
RF.test.accuracy_hog <- mean(RF.test.result_hog == test_LBP[,1])
RF.test.accuracy_hog
load("../output/RF_hog.RData")
RF_hog.time <- RF_hog$time
RF_hog.time
RF.test.result_hog <- test(RF_hog, test_hog)
RF.test.accuracy_hog <- mean(RF.test.result_hog == test_hog[,1])
RF.test.accuracy_hog
load("../output/RF_hog.RData")
RF_hog.time <- RF_hog$time
RF_hog.time
RF.test.result_hog <- test(RF_hog, test_hog)
RF.test.accuracy_hog <- mean(RF.test.result_hog == test_LBP[,1])
RF.test.accuracy_hog
load("../output/RF_hog.RData")
RF_hog.time <- RF_hog$time
RF_hog.time
RF.test.result_hog <- test(RF_hog, test_hog)
RF.test.accuracy_hog <- mean(RF.test.result_hog == test_hog[,1])
RF.test.accuracy_hog
LR_hog <- train_lr(train_hog)
save(LR_hog,file="../output/LR_hog.RData")
load("../output/LR_hog.RData")
LR_hog.time <- LR_hog$time
LR_hog.time
LR.test.result_hog <- test(LR_hog, test_hog)
LR.test.accuracy_hog <- mean(LR.test.result_hog == test_hog[,1])
LR.test.accuracy_hog
test_hog
mean(deaths3)
?traincontrol
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
#library(EBImage)
#library(mxnet)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
datasplit_hog <- data_split("hog_extraction")
train_hog <- datasplit_hog$df_train
test_hog <- datasplit_hog$df_test
SVM_hog <- train_svm(train_hog)
save(SVM_hog,file="../output/SVM_hog.RData")
load("../output/SVM_hog.RData")
SVM_hog.time <- SVM_hog$time
SVM_hog.time
SVM.test.result_hog <- test(SVM_hog, test_hog)
SVM.test.accuracy_hog <- mean(SVM.test.result_hog == test_hog[,1])
SVM.test.accuracy_hog
load("../output/SVM_hog.RData")
SVM_hog.time <- SVM_hog$time
SVM_hog.time
SVM.test.result_hog <- test(SVM_hog, test_hog)
SVM.test.accuracy_hog <- mean(SVM.test.result_hog == test_hog[,1])
SVM.test.accuracy_hog
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
#library(EBImage)
#library(mxnet)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
SVM_hog <- train_svm(train_hog)
save(SVM_hog,file="../output/SVM_hog.RData")
load("../output/SVM_hog.RData")
SVM_hog.time <- SVM_hog$time
SVM_hog.time
SVM.test.result_hog <- test(SVM_hog, test_hog)
SVM.test.accuracy_hog <- mean(SVM.test.result_hog == test_hog[,1])
SVM.test.accuracy_hog
load("../output/SVM_hog.RData")
SVM_hog.time <- SVM_hog$time
SVM_hog.time
SVM.test.result_hog <- test(SVM_hog, test_hog)
SVM.test.accuracy_hog <- mean(SVM.test.result_hog == test_hog[,1])
SVM.test.accuracy_hog
?HOG
library("OpenImageR")
values <- NULL
path1 <- "C:/StudyLife/Columbia/STAT 5243/local project 3/train/train/images/"
for (i in 1:3000){
length1 <- nchar(as.character(i))
directory <- paste0(path1,paste(rep(0,4 - length1),collapse=""),i,".jpg")
# Retrieve the all the images
images <- readImage(directory)
# Use HOG function to extract the info of all images
extractedvalues <- HOG(images, cells = 6)
values <- rbind(values,extractedvalues)
}
# Save the info of each image into the hog_extraction file
write.csv(values, file = "hog_extraction1.csv")
datasplit_hog <- data_split("hog_extraction1")
train_hog <- datasplit_hog$df_train
test_hog <- datasplit_hog$df_test
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
#library(EBImage)
#library(mxnet)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
SVM_hog <- train_svm(train_hog)
save(SVM_hog,file="../output/SVM_hog.RData")
load("../output/SVM_hog.RData")
SVM_hog.time <- SVM_hog$time
SVM_hog.time
SVM.test.result_hog <- test(SVM_hog, test_hog)
SVM.test.accuracy_hog <- mean(SVM.test.result_hog == test_hog[,1])
SVM.test.accuracy_hog
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
#library(EBImage)
#library(mxnet)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
datasplit_hog <- data_split("hog_extraction1")
train_hog <- datasplit_hog$df_train
test_hog <- datasplit_hog$df_test
GBM_hog <- train_gbm(train_hog)
save(GBM_hog,file="../output/GBM_hog.RData")
load("../output/GBM_hog.RData")
GBM_hog.time <- GBM_hog$time
GBM_hog.time
GBM.test.result_hog <- test_gbm(GBM_hog, test_hog)
GBM.test.accuracy_hog <- mean(GBM.test.result_hog == test_hog[,1])
GBM.test.accuracy_hog
SVM_hog <- train_svm(train_hog)
save(SVM_hog,file="../output/SVM_hog.RData")
load("../output/SVM_hog.RData")
SVM_hog.time <- SVM_hog$time
SVM_hog.time
SVM.test.result_hog <- test(SVM_hog, test_hog)
SVM.test.accuracy_hog <- mean(SVM.test.result_hog == test_hog[,1])
SVM.test.accuracy_hog
RF_hog <- train_rf(train_hog)
save(RF_hog,file="../output/RF_hog.RData")
load("../output/RF_hog.RData")
RF_hog.time <- RF_hog$time
RF_hog.time
RF.test.result_hog <- test(RF_hog, test_hog)
RF.test.accuracy_hog <- mean(RF.test.result_hog == test_hog[,1])
RF.test.accuracy_hog
LR_hog <- train_lr(train_hog)
save(LR_hog,file="../output/LR_hog.RData")
load("../output/LR_hog.RData")
LR_hog.time <- LR_hog$time
LR_hog.time
LR.test.result_hog <- test(LR_hog, test_hog)
LR.test.accuracy_hog <- mean(LR.test.result_hog == test_hog[,1])
LR.test.accuracy_hog
