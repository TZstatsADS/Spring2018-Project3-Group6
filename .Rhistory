select(File, Military:Patriotism,date)%>%
group_by(File)%>%
summarise_all(funs(mean))
par(mar=c(1,1,1,1))
topic.summary=tbl_df(corpus.list.df)%>%
select(File, Military:Patriotism,Date)%>%
group_by(File)%>%
summarise_all(funs(mean))
topic.summary=as.data.frame(topic.summary)
rownames(topic.summary)=topic.summary[,1]
# [1] "Military"   "WorldPeace"  "Time"  "Economy",
# [5] "Nation"  "Responsibility"  "Hope"  "Equality",
# [9] "America"  "Politic"  "WorkingFamilies"  "Legislation",
# [13] "Community"  "Government"  "Patriotism"
topic.plot=c(1 :15)
print(topics.hash[topic.plot])
heatmap.2(as.matrix(topic.summary[,topic.plot+1]),
scale = "column", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none", main="All presidents")
as.matrix(topic.summary[,topic.plot+1]
as.matrix(topic.summary[,topic.plot+1])
topic.summary
?heatmap.2
par(mar=c(1,1,1,1))
topic.summary=tbl_df(corpus.list.df)%>%
select(File, Military:Patriotism,Date)%>%
group_by(File)%>%
summarise_all(funs(mean))
topic.summary=as.data.frame(topic.summary)
rownames(topic.summary)=topic.summary[,1]
# [1] "Military"   "WorldPeace"  "Time"  "Economy",
# [5] "Nation"  "Responsibility"  "Hope"  "Equality",
# [9] "America"  "Politic"  "WorkingFamilies"  "Legislation",
# [13] "Community"  "Government"  "Patriotism"
topic.plot=c(1 :15)
print(topics.hash[topic.plot])
heatmap.2(as.matrix(topic.summary[,topic.plot+1]),
scale = "column", key=F, Rowv=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none", main="All presidents")
order
?order
topic.summary[order(topic.summary$Date,decreasing = F)]
topic.summary[order(topic.summary$Date,decreasing = F),]
heatmap.2(as.matrix(topic.summary[,topic.plot+1]),
scale = "column", key=F, Rowv=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none", main="All presidents")
topic.summary <- topic.summary[order(topic.summary$Date,decreasing = F),]
heatmap.2(as.matrix(topic.summary[,topic.plot+1]),
scale = "column", key=F, Rowv=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none", main="All presidents")
par(mar=c(1,1,1,1))
recent_df <- NULL
for(i in 1:length(recent_presidents)){
recent_df <- rbind(recent_df, corpus.list.df[corpus.list.df$File==recent_presidents[i],])
}
topic.summary=tbl_df(recent_df)%>%
select(File, Military:Patriotism,Date)%>%
group_by(File)%>%
summarise_all(funs(mean))
topic.summary=as.data.frame(topic.summary)
rownames(topic.summary)=topic.summary[,1]
# [1] "Military"   "WorldPeace"  "Time"  "Economy",
# [5] "Nation"  "Responsibility"  "Hope"  "Equality",
# [9] "America"  "Politic"  "WorkingFamilies"  "Legislation",
# [13] "Community"  "Government"  "Patriotism"
topic.plot=c(1 :15)
print(topics.hash[topic.plot])
topic.summary <- topic.summary[order(topic.summary$Date,decreasing = F),]
heatmap.2(as.matrix(topic.summary[,topic.plot+1]),
scale = "column", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none",main="Recent 5 President")
par(mar=c(1,1,1,1))
recent_df <- NULL
for(i in 1:length(recent_presidents)){
recent_df <- rbind(recent_df, corpus.list.df[corpus.list.df$File==recent_presidents[i],])
}
topic.summary=tbl_df(recent_df)%>%
select(File, Military:Patriotism,Date)%>%
group_by(File)%>%
summarise_all(funs(mean))
topic.summary=as.data.frame(topic.summary)
rownames(topic.summary)=topic.summary[,1]
# [1] "Military"   "WorldPeace"  "Time"  "Economy",
# [5] "Nation"  "Responsibility"  "Hope"  "Equality",
# [9] "America"  "Politic"  "WorkingFamilies"  "Legislation",
# [13] "Community"  "Government"  "Patriotism"
topic.plot=c(1 :15)
print(topics.hash[topic.plot])
topic.summary <- topic.summary[order(topic.summary$Date,decreasing = F),]
heatmap.2(as.matrix(topic.summary[,topic.plot+1]),
scale = "column", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none",main="Recent 5 President")
par(mar=c(1,1,1,1))
middle_df <- NULL
for(i in 1:length(middle_presidents)){
middle_df <- rbind(middle_df, corpus.list.df[corpus.list.df$File==middle_presidents[i],])
}
topic.summary=tbl_df(middle_df)%>%
select(File, Military:Patriotism,Date)%>%
group_by(File)%>%
summarise_all(funs(mean))
topic.summary=as.data.frame(topic.summary)
rownames(topic.summary)=topic.summary[,1]
# [1] "Military"   "WorldPeace"  "Time"  "Economy",
# [5] "Nation"  "Responsibility"  "Hope"  "Equality",
# [9] "America"  "Politic"  "WorkingFamilies"  "Legislation",
# [13] "Community"  "Government"  "Patriotism"
topic.plot=c(1 :15)
print(topics.hash[topic.plot])
topic.summary <- topic.summary[order(topic.summary$Date,decreasing = F),]
heatmap.2(as.matrix(topic.summary[,topic.plot+1]),
scale = "column", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none",main="Middle 5 Presidents")
par(mfrow=c(1,3), mar=c(0,0,0,0), bty="n", xaxt="n", yaxt="n", font.main=1)
folder.path="../data/inauguralSpeeches/"
recent_presidents <- c("GeorgeBush","WilliamJClinton","GeorgeWBush","BarackObama","DonaldJTrump")
middle_presidents <- c("BenjaminHarrison","GroverCleveland-I","WilliamMcKinley",
"TheodoreRoosevelt","WilliamHowardTaft")
founding_presidents <- c("GeorgeWashington","JohnAdams","ThomasJefferson","JamesMadison","JamesMonroe")
recent_locale <- paste(folder.path,"inaug",recent_presidents,"-1.txt",sep = "")
middle_locale <- paste(folder.path,"inaug",middle_presidents,"-1.txt",sep = "")
founding_locale <- paste(folder.path,"inaug",founding_presidents,"-1.txt",sep = "")
speechesCloud(recent_locale,150,color=brewer.pal(9,"Reds"))
speechesCloud(middle_locale,150,color=brewer.pal(9,"Greens"))
speechesCloud(founding_locale,150,color=brewer.pal(9,"Blues"))
shiny::runApp('Documents/GitHub/Spring2018-Project2-group-9/app')
runApp('Documents/GitHub/Spr2017-proj2-grp10/app')
runApp('Documents/GitHub/Spring2018-Project2-group-9/doc')
library(Cairo)
install.packages("Cairo")
library(Cairo)
runApp('Documents/GitHub/Spring2018-Project2-group-9/doc')
mtc <- mtcars
mtcars, aes(wt, mpg)
ggplot(mtcars, aes(wt, mpg))
ggplot(mtcars, aes(wt, mpg)) + geom_point()
runApp('Documents/GitHub/Spring2018-Project2-group-9/doc')
runApp('Documents/GitHub/Spring2018-Project2-group-9/doc')
p<- ggplot(mtcars, aes(wt, mpg)) + geom_point()
ggploty(p)
plotly(p)
runApp('Documents/GitHub/Spring2018-Project2-group-9/doc')
shiny::runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
boxplot( data = mpgData)
library(datasets)
boxplot( data = mpgData)
mpgData <- mtcars
boxplot( data = mpgData)
hist( data = mpgData)
hist( data = mpgData$mpg)
hist(mpgData$mpg)
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
plot_ly(df, x = ~FishCouncilRegion, y = ~VernacularNameCategory, z = ~DepthInMeters,
type = 'scatter3d', mode = 'markers', color = ~VernacularNameCategory)
load("sample.Rdata")
load("~/Desktop/shinyapp/doc/sample.Rdata")
runApp('Desktop/shinyapp/doc')
p <- plot_ly(type = "scatter3d", mode = "markers", showlegend = TRUE) %>%
add_trace(p, x = ~FishCouncilRegion, y = ~VernacularNameCategory, z = ~DepthInMeters,
data = df)
p
p <- plot_ly(type = "scatter3d", mode = "markers", showlegend = TRUE) %>%
add_trace(p, x = ~FishCouncilRegion, y = ~VernacularNameCategory, z = ~DepthInMeters,color = ~VernacularNameCategory,
data = df)
p
select_by_df<-df
p <- plot_ly(type = "scatter3d", mode = "markers", showlegend = TRUE) %>%
add_trace(p, x = ~DepthInMeters, y = ~Condition, z = ~FishCouncilRegion,
data = select_by_df)
p
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
plot_ly(labels=~FishCouncilRegion,~FishCouncilRegion,hole=0.5,type="pie",data = df)
plot_ly(hole=0.5,type="pie",data = df$FishCouncilRegion)
plot_ly(data = df$FishCouncilRegion,hole=0.5,type="pie")
plot_ly(df,hole=0.5,type="pie")
plot_ly(df,labels=~VernacularNameCategory,hole=0.5,type="pie")
plot_ly(df,labels=~VernacularNameCategory,hole=0.3,type="pie")
plot_ly(df,labels=~VernacularNameCategory,hole=0.3,type="pie",color = ~VernacularNameCategory)
plot_ly(df,labels=~VernacularNameCategory,hole=0.3,type="pie")%>%
layout(title="Donut Chart of Violation Type",xaxis=list(title=NULL,showgrid=F),yaxis=list(title=NULL,showgrid=F),plot_bgcolor='rgba(0,0,0,1)')
plot_ly(df,labels=~VernacularNameCategory,hole=0.3,type="pie")%>%
layout(title="Coral's Distribution",xaxis=list(title=NULL,showgrid=F),yaxis=list(title=NULL,showgrid=F),plot_bgcolor='rgba(0,0,0,1)')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
plot_ly(selectdf_2,labels=~FishCouncilRegion,hole=0.3,type="pie")%>%
layout(title="Coral's Distribution",xaxis=list(title=NULL,showgrid=F),yaxis=list(title=NULL,showgrid=F),plot_bgcolor='rgba(0,0,0,1)')
selectdf_2<-df
plot_ly(selectdf_2,labels=~FishCouncilRegion,hole=0.3,type="pie")%>%
layout(title="Coral's Distribution",xaxis=list(title=NULL,showgrid=F),yaxis=list(title=NULL,showgrid=F),plot_bgcolor='rgba(0,0,0,1)')
p <- plot_ly(type = "pie",hole=0.3) %>%
add_trace(p, labels = ~FishCouncilRegion,color = ~FishCouncilRegion,data = selectdf_2)
p <- plot_ly(type = "pie",hole=0.3) %>%
add_trace(p, labels = ~FishCouncilRegion,color = ~FishCouncilRegion,data = selectdf_2)
p <- plot_ly(type = "pie",hole=0.3) %>%
add_trace(p, labels = ~FishCouncilRegion,color = ~FishCouncilRegion,data = selectdf_2)
p <- plot_ly(type = "pie",hole=0.3) %>%
add_trace(p, labels = ~FishCouncilRegion,color = ~FishCouncilRegion,data = selectdf_2)
p
plot_ly(selectdf_2,labels=~FishCouncilRegion,hole=0.3,type="pie")
plot_ly(selectdf_2,labels=~FishCouncilRegion,hole=0.3,type="pie")%>%
layout(title="Coral's Distribution",plot_bgcolor='rgba(0,0,0,1)')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
p <- plot_ly(type = "pie",hole=0.3) %>%
add_trace(p, labels = ~FishCouncilRegion,data = df)
p
runApp('Desktop/shinyapp/doc')
p <- plot_ly(type = "pie",hole=0.3)
runApp('Desktop/shinyapp/doc')
ggplot(data = selectdf_2,aes(x=DepthInMeters))
ggplot(data = selectdf_2,aes(x="",y=~FishCouncilRegion))
frequency(selectdf_2$FishCouncilRegion)
summary(selectdf_2$FishCouncilRegion)
factor(selectdf_2$FishCouncilRegion)
unique(factor(selectdf_2$FishCouncilRegion))
levels(factor(selectdf_2$FishCouncilRegion))
count(factor(selectdf_2$FishCouncilRegion))
count(selectdf_2$FishCouncilRegion)
table(selectdf_2$FishCouncilRegion)
df2 <- table(selectdf_2$FishCouncilRegion)
df2
df2[1]
df2 <- as.data.frame(table(selectdf_2$FishCouncilRegion))
View(df2)
ggplot(data = df2,aes(x="",y= ~Freq, fill=Var1))
ggplot(data = df2,aes(x="",y= ~Freq, fill=~Var1))
factor(1)
ggplot(data = df2,aes(x=factor(1),y= ~Freq, fill=~Var1))
ggplot(df2,aes(x=factor(1),y= ~Freq, fill=~Var1))
dt = data.frame(A = c(2, 7, 4, 10, 1), B = c('B','A','C','D','E'))
p = ggplot(dt, aes(x = "", y = A, fill = B)) +
geom_bar(stat = "identity") +
coord_polar(theta = "y")   ## 把柱状图折叠成饼图（极坐标）
p
View(dt)
ggplot(df2,aes(x="",y= ~Freq, fill=~Var1))
table(selectdf_2$FishCouncilRegion)
data.frame(table(selectdf_2$FishCouncilRegion))
colnames(df2)<- c("Region","Freq")
df2
df2$Freq
df2$Region
as.character(df2$Region)
ggplot(df2,aes(x="",y= df2$Freq, fill= as.character(df2$Region)))
ggplot(df2,aes(x="",y= df2$Freq, fill= as.character(df2$Region)))+
geom_bar(stat = "identity") +
coord_polar(theta = "y")
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
df2 = df2[order(df2$Freq, decreasing = TRUE),]
View(df2)
myLabel = as.vector(df2$Region)
myLabel = paste(myLabel, "(", round(dt$A / sum(dt$A) * 100, 2), "%)        ", sep = "")
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
cumsum(df2$Freq)
y = df2$Freq/2 + c(0, cumsum(df2$Freq)[-length(df2$Freq)]
)
y
x = sum(df2$Freq)/20, label = myLabel)
x = sum(df2$Freq)/20,
x = sum(df2$Freq)/20
x
runApp('Desktop/shinyapp/doc')
ggplot(df2,aes(x="",y= df2$Freq, fill= as.character(df2$Region)))+
geom_bar(stat = "identity",width = 0.6) +
coord_polar(theta = "y")+
labs(x = "", y = "", title = "")+
theme(axis.ticks = element_blank()) +
theme(legend.title = element_blank(), legend.position = "top")
ggplot(df2,aes(x="",y= df2$Freq, fill= as.character(df2$Region)))+
geom_bar(stat = "identity",width = 0.6) +
coord_polar(theta = "y")+
labs(x = "", y = "", title = "")+
theme(axis.ticks = element_blank()) +
theme(legend.title = element_blank(), legend.position = "top")+
scale_fill_discrete(breaks = df2$Region, labels = myLabel)
install.packages("pie")
pie
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
pie(table(selectdf_2$FishCouncilRegion))
library("plotrix")
lp=pie3D(selectdf_2$FishCouncilRegion,radius=0.8,height=0.1,labels=lbls,explode=0.1,main="3D pie DEMO")
?pie3D
lp=pie3D(table(selectdf_2$FishCouncilRegion),
radius=0.8,height=0.1,labels=lbls,explode=0.1,main="3D pie DEMO")
lp=pie3D(table(selectdf_2$FishCouncilRegion),
radius=0.8,height=0.1,labels=myLabel,explode=0.1,main="3D pie DEMO")
#调整标签位置(效果不太好)
lp[1] <- 0.05
lp[3] <- 3.2
pie3D(z$pct,radius=0.8,height=0.1,labels=lbls,labelpos=lp,explode=0.1,main="3D pie DEMO")
})
lp[1] <- 0.05
lp[3] <- 3.2
pie3D(z$pct,radius=0.8,height=0.1,labels=lbls,labelpos=lp,explode=0.1,main="3D pie DEMO")
runApp('Desktop/shinyapp/doc')
?pie3D
runApp('Desktop/shinyapp/doc')
nrow(df2)
colors.pal <- brewer.pal(nrow(df2), "Set1")
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
brewer.pal
?
brewer.pal
runApp('Desktop/shinyapp/doc')
colors.pal <- brewer.pal(nrow(df2), "Dark2")
runApp('Desktop/shinyapp/doc')
myLabel = as.vector(df2$Region)
myLabel = paste(myLabel, "(", round(df2$Freq / sum(df2$Freq) * 100, 2), "%)", sep = "")
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
t2 <- as.table(d2)
t2 <- as.table(df2)
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
pie3D
?pie3D
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
runApp('Desktop/shinyapp/doc')
shiny::runApp('Documents/GitHub/Spring2018-Project2-group-9/app')
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
library(EBImage)
library(mxnet)
packages.used=c("caret","gbm","EBImage")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(EBImage)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
df <- data_split("SIFT")
SIFT_train <- df$df_train
SIFT_test <- df$df_test
baseline.result <- train_gbm(SIFT_train)
save(baseline.result,file="../output/baseline.result.Rdata")
save(baseline.result,file="../output/baseline.result.RData")
baseline.result[[4]]
baseline.result$time
baseline.time = baseline.result$time
baseline.time
baseline.result$fit
baseline.result$fit$train.error
baseline.result$fit$valid.error
baseline.result[[3]]
View(baseline.result)
baseline.result
baseline.result$time
library(substring)
library(substr)
baseline.time = baseline.result$time
baseline.time
baseline.result[["fit"]][["train.error"]]
baseline.result[["fit"]]
baseline.result[["4"]]
baseline.result[[3]]
baseline.result[[1]]
baseline.result[[2]]
baseline.result[[3]]
baseline.result[[1]]
load("~/Documents/GitHub/Fall2017-project3-grp4/output/baseline.result.Rdata")
View(baseline.result)
setwd("~/Documents/GitHub/Spring2018-Project3-Group6")
load("../output/baseline.result.RData")
View(baseline.result)
baseline.result[["fit"]][["train.error"]]
1-baseline.result[["fit"]][["train.error"]]
1-baseline.result[["fit"]][["train.error"]][400]
training.accuracy = 1-baseline.result[["fit"]][["train.error"]][400]
test.accuracy  <- test_gbm(baseline.result, SIFT_test)
source("../lib/test.R")
test.accuracy  <- test_gbm(baseline.result, SIFT_test)
SIFT_test[,1]
mean(test.result != SIFT_test[,1])
test.result <- test_gbm(baseline.result, SIFT_test)
mean(test.result != SIFT_test[,1])
test.accuracy <- 1 - mean(test.result != SIFT_test[,1])
print(paste0("The accuracy rate of baseline model is ", test.accuracy))
training.accuracy <- 1-baseline.result[["fit"]][["train.error"]][400]
training.accuracy
test.result <- test_gbm(baseline.result, SIFT_test)
test.accuracy <- 1 - mean(test.result != SIFT_test[,1])
test.accuracy
packages.used=c("caret","gbm","EBImage")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(EBImage)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
packages.used=c("caret","gbm","EBImage")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(EBImage)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
df <- data_split("SIFT")
SIFT_train <- df$df_train
SIFT_test <- df$df_test
baseline.result <- train_gbm(SIFT_train)
save(baseline.result,file="../output/baseline.result.RData")
load("../output/baseline.result.RData")
baseline.time <- baseline.result$time
baseline.time
training.accuracy <- 1-baseline.result[["fit"]][["train.error"]][400]
training.accuracy
test.result <- test_gbm(baseline.result, SIFT_test)
test.accuracy <- 1 - mean(test.result != SIFT_test[,1])
test.accuracy
gbm_prob = predict(baseline.result$fit, n.trees = 400, newdat =  SIFT_test, type="response")
apply(gbm_prob, 1, which.max)
gbm_prob
View(gbm_prob)
?predict
?predict.type
?type
gbm_prob = predict(baseline.result$fit, n.trees = 400, newdat =  SIFT_test, type="class")
gbm_prob = predict(baseline.result$fit, n.trees = 400, newdat =  SIFT_test, type="link")
gbm_class = apply(gbm_prob, 1, which.max)
